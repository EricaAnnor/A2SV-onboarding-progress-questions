class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def rob(self, root: Optional[TreeNode]) -> int:
        hashmap = defaultdict(int)

        def helper(root):
            if not root:
                return 0
            

            if root not in hashmap:
                
                hashmap[root] = max(root.val + (helper(root.left.left) if root.left else 0) + (helper(root.left.right) if root.left else 0) + (helper(root.right.left) if root.right else 0) + (helper(root.right.right) if root.right else 0), helper(root.left) + helper(root.right))
            return hashmap[root]
        
        return helper(root)
