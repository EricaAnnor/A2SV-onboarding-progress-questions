class UnionFind:
    def __init__(self, size):
        self.parent = {chr(i): chr(i) for i in range(ord('a'), ord('a') + size)}
        self.size = {chr(i): 1 for i in range(ord('a'), ord('a') + size)}

    def find(self, node):
        if node == self.parent[node]:
            return node
        idx = self.find(self.parent[node])
        return idx

    def union(self, x, y):
        parent_x = self.find(x)
        parent_y = self.find(y)
        if parent_x != parent_y:
            if ord(parent_x) < ord(parent_y):
                self.parent[parent_y] = parent_x
                self.size[parent_x] += self.size[parent_y]
            else:
                self.parent[parent_x] = parent_y
                self.size[parent_y] += self.size[parent_x]

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        unionFind = UnionFind(26)
        for x in range(len(s1)):
            unionFind.union(s1[x], s2[x])
            
        res = ""
        for x in baseStr:
            res += unionFind.find(x)
        return res
