class UnionFind:
    def __init__(self,size):
        self.parent = {chr(i):chr(i) for i in range(ord('a'),ord('a')+size)}
        self.sixe = {chr(i):1 for i in range(ord('a'),ord('a') + size)}    
    def find(self,node):
        if node == self.parent[node]:
            return node
        idx = self.find(self.parent[node])
        return idx

    def union(self,x,y):
        parent_x = self.find(x)
        parent_y = self.find(y)

        if parent_x != parent_y:
            if self.sixe[parent_x]  > self.sixe[parent_y]:
                self.parent[parent_y] = parent_x
                self.sixe[parent_x] += self.sixe[parent_y]
            else:
                self.parent[parent_x] = parent_y
                self.sixe[parent_y] += self.sixe[parent_x] 


class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        unionFind = UnionFind(26)

        check = []
        for x in equations:
            print(x[1:3])
            if x[1:3] == '!=':
               
                check.append(x)
            else:
                unionFind.union(x[0],x[-1])
        
        for y in check:
            if y[1:3] == '!=':
                if unionFind.find(y[0]) == unionFind.find(y[-1]):
                    return False
        
        print(unionFind.parent)
        return True
        
