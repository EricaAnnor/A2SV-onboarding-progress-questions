class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self,word):
        cur = self.root

        for x in word:
            
            if x not in cur.children:
                cur.children[x] = TrieNode()
            cur = cur.children[x]
        cur.is_end = True
    
    def longest(self):
        cur = self.root
        prefix = ''

        while cur and not cur.is_end and len(cur.children) == 1:
            nex = next(iter(cur.children))
            prefix += nex
            cur = cur.children[nex]
        return prefix

class Solution:   
    def longestCommonPrefix(self, strs: List[str]) -> str:
        trie = Trie()
        for word in strs:
            trie.insert(word)
        return trie.longest()
        
        
