class TrieNode:
    def __init__(self):
        self.is_end = False
        self.children = [ None for _ in range(26) ]


class Trie:

    def __init__(self):
        self.root = TrieNode()

        

    def insert(self, word: str) -> None:
        cur = self.root
        for letter in word:
            if not cur.children[ord(letter) - ord('a')]:
                cur.children[ord(letter)-ord('a')] = TrieNode()
            cur = cur.children[ord(letter)-ord('a')]
        cur.is_end = True
        

    def search(self, word: str) -> bool:
        cur = self.root
        for x in word:
            idx = ord(x) - ord('a')
            if not cur.children[idx]:
                return False
            cur = cur.children[idx]

        return cur.is_end
        

    def startsWith(self, prefix: str) -> bool:
        cur = self.root
        for x in prefix:
            idx = ord(x) - ord('a')
            if not cur.children[idx]:
                return False
            cur = cur.children[idx]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
