class TrieNode:
    def __init__(self):
        self.children = [None] * 26
        self.is_end = False

class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        cur = self.root
        for x in word:
            idx = ord(x) - ord('a')
            if not cur.children[idx]:
                cur.children[idx] = TrieNode()
            cur = cur.children[idx]
        cur.is_end = True

    def search(self, word: str) -> bool:
        return self.search_helper(word, 0, self.root)

    def search_helper(self, word: str, index: int, node: TrieNode) -> bool:
        if index == len(word):
            return node.is_end
        if word[index] == '.':
            for child in node.children:
                if child and self.search_helper(word, index + 1, child):
                    return True
            return False
        else:
            idx = ord(word[index]) - ord('a')
            if not node.children[idx]:
                return False
            return self.search_helper(word, index + 1, node.children[idx])
