class UnionFind:
    def __init__(self,size):
        self.parent = [i for i in range(size)]
        self.sixe = [1] * size
    
    def find(self,node):
        if node == self.parent[node]:
            return node
        idx = self.find(self.parent[node])
        return idx

    def union(self,x,y):
        parent_x = self.find(x)
        parent_y = self.find(y)

        if parent_x != parent_y:
            if self.sixe[parent_x]  > self.sixe[parent_y]:
                self.parent[parent_y] = parent_x
                self.sixe[parent_x] += self.sixe[parent_y]
            else:
                self.parent[parent_x] = parent_y
                self.sixe[parent_y] += self.sixe[parent_x] 

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        unionFind = UnionFind(len(edges)+1)

        for u,v in edges:
            if unionFind.find(u) == unionFind.find(v):
                return [u,v]
            else:
                unionFind.union(u,v)
        return []

        
